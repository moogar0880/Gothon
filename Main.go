/* Handle parsing Gothon command line arguments and compile/run code, apply 
settings or output various information. This is roughly a 1:1 pairing with the
official Python distro as far as the interface is concerned
*/
package main

import (
	"os"
	"fmt"
	"flag"
)

var HELP, BYTECODE, NONUNIX, VERSION, VERBOSE, DEBUG, IGNOREENV, INSPECT,
	OPTIMIZE, REMOVEDOCS, SALT, USERSITE, IMPORTSITE, TABWARN, TABERROR,
	UNBUFFEREDSTREAM bool
var WARNINGCONTROL, COMMAND, MODULE string

func main() {
	parse_args()

	if HELP {
		usage()
		os.Exit(0)
	}
	if VERSION {
		fmt.Printf("Gothon 3.4.1\n")
		os.Exit(0)
	}

	// Do gothon-y things here
}	

// Define and parse command line args
func parse_args() {
	// Help flags
	flag.BoolVar(&HELP, "h", false, "print this help message and exit (also --help)")
	flag.BoolVar(&HELP, "help", false, "print this help message and exit (also -h)")
	// Version flags
	flag.BoolVar(&VERSION, "V", false, "print the Python version number and exit (also --version)")
	flag.BoolVar(&VERSION, "version", false, "print the Python version number and exit (also -V)")
	// Optimization flags
	flag.BoolVar(&OPTIMIZE, "O", false, "optimize generated bytecode slightly; also GOTHONOPTIMIZE=x")
	flag.BoolVar(&REMOVEDOCS, "OO", false, "remove doc-strings in addition to the -O optimizations")
	// Tabbing flags
	flag.BoolVar(&TABWARN, "t", false, "issue warnings about inconsistent tab usage (-tt: issue errors)")
	flag.BoolVar(&TABERROR, "tt", false, "issue errors for inconsistent tab usage (-t: issue warnings)")
	// Arguments
	flag.StringVar(&WARNINGCONTROL, "W", "", "warning control; arg is action:message:category:module:lineno")
	flag.StringVar(&COMMAND, "c", "", "program passed in as string (terminates option list)")
	flag.StringVar(&MODULE, "m", "", "run library module as a script (terminates option list)")
	// Everything Else
	flag.BoolVar(&BYTECODE, "B", false, "don't write .py[co] files on import; also GOTHONDONTWRITEBYTECODE=x")
	flag.BoolVar(&NONUNIX, "x", false, "skip first line of source, allowing use of non-Unix forms of #!cmd")
	flag.BoolVar(&VERBOSE, "v", false, "verbose (trace import statements); also GOTHONVERBOSE=x can be supplied multiple times to increase verbosity")
	flag.BoolVar(&DEBUG, "d", false, "debug output from parser; also GOTHONDEBUG=x")
	flag.BoolVar(&IGNOREENV, "E", false, "ignore GOTHON* environment variables (such as GOTHONPATH)")
	flag.BoolVar(&INSPECT, "i", false, "inspect interactively after running script; forces a prompt even if stdin does not appear to be a terminal; also GOTHONINSPECT=x")
	flag.BoolVar(&SALT, "R", false, "use a pseudo-random salt to make hash() values of various types be unpredictable between separate invocations of the interpreter, as a defense against denial-of-service attacks")
	flag.BoolVar(&USERSITE, "s", false, "don't add user site directory to sys.path; also GOTHONNOUSERSITE")
	flag.BoolVar(&IMPORTSITE, "S", false, "don't imply 'import site' on initialization")
	flag.BoolVar(&UNBUFFEREDSTREAM, "u", false, "unbuffered binary stdout and stderr; also GOTHONUNBUFFERED=x")

	flag.Parse()
}

// Print comandline arguemnt usage information
func usage() {
	s := `-B     : don't write .py[co] files on import; also GOTHONDONTWRITEBYTECODE=x
-c cmd : program passed in as string (terminates option list)
-d     : debug output from parser; also GOTHONDEBUG=x
-E     : ignore GOTHON* environment variables (such as GOTHONPATH)
-h     : print this help message and exit (also --help)
-i     : inspect interactively after running script; forces a prompt even
         if stdin does not appear to be a terminal; also GOTHONINSPECT=x
-m mod : run library module as a script (terminates option list)
-O     : optimize generated bytecode slightly; also GOTHONOPTIMIZE=x
-OO    : remove doc-strings in addition to the -O optimizations
-R     : use a pseudo-random salt to make hash() values of various types be
         unpredictable between separate invocations of the interpreter, as a 
         defense against denial-of-service attacks
-Q arg : division options: -Qold (default), -Qwarn, -Qwarnall, -Qnew
-s     : don't add user site directory to sys.path; also GOTHONNOUSERSITE
-S     : don't imply 'import site' on initialization
-t     : issue warnings about inconsistent tab usage (-tt: issue errors)
-u     : unbuffered binary stdout and stderr; also GOTHONUNBUFFERED=x
         see man page for details on internal buffering relating to '-u'
-v     : verbose (trace import statements); also GOTHONVERBOSE=x
         can be supplied multiple times to increase verbosity
-V     : print the Python version number and exit (also --version)
-W arg : warning control; arg is action:message:category:module:lineno
         also GOTHONWARNINGS=arg
-x     : skip first line of source, allowing use of non-Unix forms of #!cmd
file   : program read from script file
-      : program read from stdin (default; interactive mode if a tty)
arg ...: arguments passed to program in sys.argv[1:]
`
	fmt.Printf("%s", s)
}
